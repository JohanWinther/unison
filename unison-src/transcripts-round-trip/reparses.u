
structural ability Abort where
  abort : a


-- Multiline expressions in multiliine lists
multiline_fn a b c d e f g h i j = 42

multiline_list = [ 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, multiline_fn 12939233 2102020 329292 429292 522020 62929292 72020202 820202 920202 1020202 ]

softhang a b = 42

softhang_a x = do
  a = 1
  b = 2
  softhang a 'let
    c = 3
    a + b

softhang_b x = do
  a = 1
  b = 2
  softhang (100 + 200 + 300 + 400 + 500 + 600 + 700 + 800 + 900 + 1000 + 1100 + 1200 + 1300 + 1400 + 1500) 'let
    c = 3
    a + b

softhang_c x = do
  a = 1
  b = 2
  1 + softhang a do
    c = 3
    a + b

softhang_d x = do
  a = 1
  b = 2
  c = softhang do
    c = 3
    a + b
  c

-- Multi-line lambda let
-- Regression test for #3110 and #3801

fix_3110a x f =
  _ = 99
  ()

ignore x = ()

fix_3110b : ()
fix_3110b =
  fix_3110a [1, 2, 3] let x -> let
    y = Nat.increment x
    ()

fix_3110c = fix_3110a [1, 2, 3] let x -> ignore (Nat.increment x)

fix_3110d = fix_3110a [1, 2, 3] do x -> do
  y = Nat.increment x
  ()

-- Destructuring bind in delay or lambda
-- Regression test for https://github.com/unisonweb/unison/issues/3710

fix_3710 = do
  (a,b) = (1,2)
  (c,d) = (3,4)
  (e,f) = (5,6)
  (a,b,c,d,e,f)

fix_3710a = let
  (a,b) = (1,2)
  (c,d) = (3,4)
  (e,f) = (5,6)
  (a,b,c,d,e,f)

fix_3710b x = let
  (a,b) = (1,x)
  (c,d) = (3,4)
  (e,f) = (5,6)
  (a,b,c,d,e,f)

fix_3710c x = do
  (a,b) = (1,x)
  (c,d) = (3,4)
  (e,f) = (5,6)
  (a,b,c,d,e,f)

fix_3710d x = match x with
  Some x -> x
  None -> bug "oops"

-- Use soft hangs after `with` and `=` and in last argument of function application

softhang21 = handle
  x = 1
  y = abort
  x + y
  with cases
    { a } -> a
    { Abort.abort -> _ } -> 0

softhang21a = handle
  x = 1
  y = abort
  x + y
  with cases
    { a } -> "lskdfjlaksjdf al;ksdjf;lkj sa;sldkfja;sldfkj a;lsdkfj asd;lfkj "
    { Abort.abort -> _ } -> "lskdfjlaksjdf al;ksdjf;lkj sa;sldkfja;sldfkj a;lsdkfj asd;lfkj "

softhang2 x f = 0 

softhang22 = softhang2 [0,1,2,3,4,5] cases
  0 -> 0
  1 -> 1
  n -> n + 100

catchAll x = 
  99

softhang23 = do
  catchAll do
    x = 1
    y = 2
    x + y

softhang24 = do match 0 with
  0 -> 0
  1 -> 1
  n -> n

softhang25 = match Nat.increment 1 with
  2 -> "yay"
  n -> "oh no"

softhang26 = softhang2 [1,2,3,4] cases
  0 -> 1
  n -> n + 1

forkAt loc c = 
  x = 99
  390439034 

softhang27 somewhere = forkAt somewhere do
  x = 1
  y = 2 
  x + y

softhang28 = softhang2 [0,1,2,3,4,5] cases
  0 -> 0
  1 -> 1
  n -> forkAt 0 (n + n + n + n + n + n + n + n + n + n + n)

-- Weirdness reported by Stew with super long lines

longlines x = 
  u = 92393
  x

longlines_helper x = do x

longlines1 = do 
  longlines !(longlines_helper "This has to laksdjf alsdkfj alskdjf asdf be a long enough string to force a line break")

longlines2 =
  ("adsf",
    '(Text.toUtf8
       "adsfsfdgsfdgsdfgsdfgsfdgsfdgsdgsgsgfsfgsgsfdgsgfsfdgsgfsfdgsdgsdfgsgf"))

test3 = do
  run : forall a . Nat -> a
  run x = bug x
  runrun = 42
  a = "asldkfj"
  b = "asdflkjasdf"
  do do run runrun do do runrun
